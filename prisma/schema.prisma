// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// 시드 스크립트 설정 (ts-node 없이)
// generator seed {
//   provider = "ts-node --compiler-options {\"module\":\"CommonJS\"}"
//   output   = "../prisma/seed.ts"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  username     String?  @unique
  isPremium    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  shortenedUrls ShortenedUrl[]
  favorites     Favorite[]
  notifications Notification[]
  tags         Tag[]        // 사용자별 커스텀 태그

  @@map("users")
}

model ShortenedUrl {
  id                String    @id @default(cuid())
  userId            String?
  originalUrl       String
  shortCode         String    @unique
  customCode        String?   @unique
  title             String?
  description       String?
  isFavorite        Boolean   @default(false)
  isPremiumFavorite Boolean   @default(false)
  expiresAt         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags      UrlTag[]
  clicks    UrlClick[]
  favorites Favorite[]

  @@map("shortened_urls")
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  color       String   @default("#3B82F6")
  description String?
  userId      String?  // 사용자별 커스텀 태그 지원
  createdAt   DateTime @default(now())

  // Relations
  urls UrlTag[]
  user User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tags")
}

model UrlTag {
  urlId String
  tagId String

  // Relations
  url ShortenedUrl @relation(fields: [urlId], references: [id], onDelete: Cascade)
  tag Tag          @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([urlId, tagId])
  @@map("url_tags")
}

model UrlClick {
  id        String   @id @default(cuid())
  urlId     String
  ipAddress String?
  userAgent String?
  referer   String?
  country   String?
  city      String?
  clickedAt DateTime @default(now())

  // Relations
  url ShortenedUrl @relation(fields: [urlId], references: [id], onDelete: Cascade)

  @@map("url_clicks")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  urlId     String
  createdAt DateTime @default(now())

  // Relations
  user User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  url  ShortenedUrl @relation(fields: [urlId], references: [id], onDelete: Cascade)

  @@unique([userId, urlId])
  @@map("favorites")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // url_click, url_expired, system
  title     String
  message   String
  data      Json?   // 추가 데이터
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}
